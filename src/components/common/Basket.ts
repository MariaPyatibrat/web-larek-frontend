import { BasketModel } from '../models/BasketModel';
import { IBasketItem } from '../../types';
import { ensureElement } from '../../utils/utils';

export class Basket {
    protected _list: HTMLElement;
    protected _total: HTMLElement;
    protected _button: HTMLButtonElement;
    private basketModel: BasketModel;

    constructor(protected container: HTMLElement, basketModel: BasketModel) {
        this._list = ensureElement<HTMLElement>('.basket__list', container);
        this._total = ensureElement<HTMLElement>('.basket__price', container);
        this._button = container.querySelector('.basket__button, .button') as HTMLButtonElement;

        this.basketModel = basketModel;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
        this._list.addEventListener('click', (e: Event) => {
            const target = e.target as HTMLElement;
            if (target.classList.contains('basket__item-delete')) {
                const itemId = target.closest('li')?.dataset.id;
                if (itemId) {
                    this.removeItem(itemId);  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ id
                }
            }
        });
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
    set items(items: IBasketItem[]) {
        this._list.innerHTML = '';

        if (items.length === 0) {
            const emptyMessage = document.createElement('p');
            emptyMessage.textContent = '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞';
            this._list.appendChild(emptyMessage);

            this.updateBasketCounter(0);
            this._button.disabled = true;
            this.total = 0; // üëâ –û–±–Ω—É–ª—è–µ–º —Å—É–º–º—É
            return;
        }

        items.forEach((item, index) => {
            const li = document.createElement('li');
            li.classList.add('basket__item', 'card', 'card_compact');
            li.innerHTML = `
            <span class="basket__item-index">${index + 1}</span>
            <span class="card__title">${item.title}</span>
            <span class="card__price">${item.price} —Å–∏–Ω–∞–ø—Å–æ–≤</span>
            <button class="basket__item-delete" aria-label="—É–¥–∞–ª–∏—Ç—å"></button>
        `;
            li.dataset.id = item.id;
            this._list.appendChild(li);
        });

        this.updateBasketCounter(items.length);
        this._button.disabled = false;

        const totalPrice = items.reduce((sum, item) => sum + item.price, 0); // üëâ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
        this.total = totalPrice; // üëâ –û–±–Ω–æ–≤–ª—è–µ–º UI
    }



    // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
    private removeItem(itemId: string) {
        console.log(`–£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å ID: ${itemId}`);  // –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

        // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ DOM –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID
        const item = this._list.querySelector(`[data-id="${itemId}"]`);
        if (item) {
            item.remove();  // –£–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
        this.container.dispatchEvent(new CustomEvent('basket:itemRemoved', { detail: itemId }));

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        this.basketModel.handleItemRemoval(itemId);  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const updatedItems = this.basketModel.getItems();  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–æ–¥–µ–ª–∏
        this.items = updatedItems;  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    private updateBasketCounter(count: number) {
        const basketCounter = document.querySelector('.header__basket-counter') as HTMLElement;
        if (basketCounter) {
            basketCounter.textContent = count.toString();
        }
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
    set total(value: number) {
        this.setText(this._total, `${value} —Å–∏–Ω–∞–ø—Å–æ–≤`);
    }

    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ —ç–ª–µ–º–µ–Ω—Ç
    private setText(element: HTMLElement, text: string): void {
        if (element) element.textContent = text;
    }
}